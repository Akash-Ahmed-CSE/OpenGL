#include <windows.h>
#include <GL/gl.h>
#include <GL/glut.h>
#include<math.h>

void Sky()
{
       glBegin(GL_QUADS); // Sky
      //Square
      glColor3f(0.0, 0.7, 0.9);
      glVertex3f(0.0f, 0.4f, 0.0f);

      glColor3f(0.0, 0.0, 0.9);
      glVertex3f(0.0f, 1.6f, 0.0f);

      glColor3f(0.0, 0.0, 0.9);
      glVertex3f(2.0f, 1.6f, 0.6f);

      glColor3f(0.0, 0.7, 0.9);
      glVertex3f(2.0f, 0.4f, 0.0f);
      glEnd();//End quad coordinates
}

void earth(void)
{

    glBegin(GL_POLYGON);
    glColor3f(0.222,0.20,0.254);
    glVertex2d(0.0,0.0);
    glVertex2d(0.0,0.7);
    glVertex2d(0.30,0.64);
    glVertex2d(0.44,0.5);
    glVertex2d(0.48,0.5);
    glVertex2d(0.70,0.4);
    glVertex2d(0.8,0.4);
    glVertex2d(1.20,0.4);
    glVertex2d(1.30,0.4);
    glVertex2d(1.30,0);
    glEnd();


    glBegin(GL_POLYGON);
    glVertex2d(1.30,0);
    glVertex2d(1.30,0.4);
    glVertex2d(1.46,0.5);
    glVertex2d(1.52,0.5);
    glVertex2d(1.64,0.64);
    glVertex2d(1.68,0.66);
    glVertex2d(2.0,0.7);
    glVertex2d(2.0,0);

    glEnd();
glFlush ();
}






void tree(float positionx,float positiony,float color)
{
float b=0,c=0,d=0;

for(int i =0; i<=6;i++){
     glBegin(GL_TRIANGLES); //Begin quad coordinates
      //Triangle
      glColor3f(0.0, 0.3+color, 0.0);

      glVertex3f(0.1f+positionx, 0.53f+b+positiony, 0.0f);
      glVertex3f(0.11f+c+positionx, 0.50f+d+positiony, 0.0f);
      glVertex3f(0.09f+b+positionx, 0.50f+d+positiony, 0.0f);
      glEnd();//End quad coordinates
    b-=0.02;
    c+=0.02;
    d-=0.04;
}
      glBegin(GL_QUADS); // Root
      //Square
      glColor3f(0.6, 0.3, 0.3);
      glVertex3f(0.09f+positionx, 0.26f+positiony, 0.0f);
      glVertex3f(0.11f+positionx, 0.26f+positiony, 0.0f);
      glVertex3f(0.11f+positionx, 0.16f+positiony, 0.0f);
      glVertex3f(0.09f+positionx, 0.16f+positiony, 0.0f);
      glEnd();//End quad coordinates
}


void display(void)
{
    Sky();
    earth();

    tree(-0.07,0.65,0.07);
    tree(0.0,0.60,0.07);
    tree(0.1,0.55,0.07);
    tree(0.18,0.50,0.07);
    tree(0.26,0.45,0.07);
    tree(0.32,0.40,0.07);


    tree(-0.07,0.45,0.15);
    tree(0.0,0.50,0.15);
    tree(0.1,0.45,0.15);
    tree(0.18,0.40,0.15);
    tree(0.26,0.35,0.15);
    tree(0.32,0.30,0.15);

    tree(-0.03,0.40,0.2);
    tree(0.05,0.35,0.2);
    tree(0.12,0.30,0.2);
    tree(0.22,0.25,0.2);

///////////////////////////////////////////////////

    tree(1.87,0.65,0.07);
    tree(1.80,0.60,0.07);
    tree(1.73,0.55,0.07);
    tree(1.66,0.50,0.07);
    tree(1.59,0.45,0.07);
    tree(1.52,0.40,0.07);

    tree(1.87,0.45,0.15);
    tree(1.80,0.50,0.15);
    tree(1.73,0.45,0.15);
    tree(1.66,0.40,0.15);
    tree(1.59,0.35,0.15);
    tree(1.52,0.30,0.15);

    tree(1.87,0.45,0.2);
    tree(1.80,0.40,0.2);
    tree(1.71,0.33,0.2);
    tree(1.62,0.28,0.2);

glFlush ();
}


void init (void)
{
    glClearColor (0.0, 0.0, 0.0, 0.0); //select clearing (background) color
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0.0, 2.0, 0.0, 1.6, -10.0, 10.0);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize (1200, 800);
    glutInitWindowPosition (100, 100);
    glutCreateWindow ("Project");
    init();

    glutDisplayFunc(display);

    glutMainLoop();
    return 0;
}
